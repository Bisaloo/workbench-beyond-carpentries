---
title: "Use of the workbench beyond the Carpentries"
subtitle: "Challenges and opportunities"
author:
  - name: "Hugo Gruson"
    orcid: "0000-0002-4094-1476"
date: last-modified
format: 
  dashboard:
    orientation: columns
    nav-buttons: github
---

# Introduction

::: {.card}

The Carpentries workbench is a set of R packages that provides the infrastructure for all Carpentries lesson materials since 2023. It can be considered as a free, open-source and fully reusable Learning Management System (LMS). The code is available on GitHub under an MIT license and the hosting and automation setup are provided transparently as configuration as code, and for free via GitHub Pages and GitHub Actions. This makes the workbench a prime candidate for any external community that wishes to use a well-tested, free and replicable LMS. In this dashboard, I investigate the use of the workbench in external communities, beyond the Carpentries. This dashboard thus targets multiple audiences and serves multiple purposes:

- Strengthen the case for the further funding of the workbench as a critical piece of technical infrastructure, not just for the Carpentries, but also for adjacent external communities
- Potentially inform the future development of the workbench by highlighting our struggles as an external community adopting this framework, and by analyzing forks of the workbench packages
- Demonstrate to external communities the steps they can follow to use the workbench for their own training materials, including how to define and implement a custom theme.

:::

# Overview

```{r setup}
knitr::opts_chunk$set(
  cache = TRUE
)
library(tidyverse)
```

```{r}
carpentry_orgs <- c(
  "carpentries-incubator",
  "datacarpentry",
  "LibraryCarpentry",
  "swcarpentry",
  "carpentries-lab",
  "fishtree-attempt",
  "carpentries"
)
```

```{r}
repos_workbench <- jsonlite::read_json("data/repos_workbench.json", simplifyVector = TRUE) |> 
  dplyr::mutate(
    owner_type = if_else(owner %in% carpentry_orgs, "Carpentries", owner_type)
  )
```

```{r workbench_config}
config_files <- repos_workbench |>
  as.list() |> 
  purrr::transpose() |> 
  purrr::map(~ gh::gh("/repos/{owner}/{repo}/contents/{path}", owner = .x$owner, repo = .x$repo, path = "config.yaml")) |> 
  purrr::map("content")

config_contents <- config_files |> 
  purrr::map(~ yaml::yaml.load(rawToChar(base64enc::base64decode(.x))))
```

```{r}
lifecycle <- purrr::map_chr(config_contents, "life_cycle") |> 
  cbind(lifecycle = _, repos_workbench)
```

## Who is hosting workbench lessons? {width=25%}

### Some figures about workbench repos and their owners {height=20%}

#### Col

```{r}
#| content: valuebox
#| title: "Number of repositories"
#| color: secondary
list(
  value = nrow(repos_workbench)
)
```

#### Col

```{r}
#| content: valuebox
#| title: "Number of owners"
#| color: secondary
list(
  value = dplyr::n_distinct(repos_workbench$owner)
)
```

### Histogram of owners and organizations

```{r fig.height=13}
# TODO: Facet by org / official / user
repos_workbench |>
  dplyr::mutate(
    owner = fct_lump_min(owner, 2, other_level = "Single repo owner")
  ) |> 
  dplyr::summarise(n = n(), .by = c("owner", "owner_type")) |> 
  dplyr::mutate(
    total = sum(n),
    .by = "owner"
  ) |> 
  dplyr::mutate(
    owner = fct_reorder(owner, total),
    owner = fct_relevel(owner, "Single repo owner", after = 0)
  ) |>
  ggplot(aes(x = n, y = owner, fill = owner_type)) +
    geom_col() +
    theme_minimal() +
    theme(
      text = element_text(size = 20),
      legend.position = "bottom"
    ) +
    labs(x = "Number of repositories", y = "Owner") +
    scale_fill_brewer(palette = "Set1")
```

## To whom are the lessons targeted? {width=50%}

### Row {height=25%}

#### Lifecycle

```{r}
lifecycle |> 
  filter(lifecycle %in% c("pre-alpha", "alpha", "beta", "stable")) |> 
  mutate(
    lifecycle = factor(lifecycle, levels = c("pre-alpha", "alpha", "beta", "stable")),
    carpentries = owner_type == "Carpentries"
  ) |>
  ggplot(aes(y = lifecycle, fill = lifecycle, alpha = !carpentries)) +
    geom_bar() +
    scale_fill_manual(values = c(
      "pre-alpha" = "#87CDDE",
      "alpha"     = "#FF6600",
      "beta"      = "#FFCC00",
      "stable"    = "#71C837"
    )) +
    theme_minimal() +
    theme(
      text = element_text(size = 32),
      legend.position = "right"
    ) +
    scale_alpha_manual(values = c(0.3, 1), labels = c("Official", "Unofficial"), name = "Lesson type") +
    guides(fill = "none") +
    labs(x = "Number of repositories", y = "Lifecycle")
```

#### Language

```{r}
config_contents |> 
  set_names(repos_workbench$repo) |> 
  purrr::map("lang") |> 
  unlist() %>%
  data.frame(repo = names(.), lang = .) |> 
  summarise(n = n(), .by = lang) |>
  mutate(code = if_else(lang == "en", "gb", lang)) |>
  ggplot(aes(x = n, y = lang)) +
    geom_col() +
    theme_minimal() +
    ggimage::geom_flag(x = -6, aes(image = code), size = 0.17) +
    expand_limits(x = -7) +
    theme(
      text = element_text(size = 32),
      legend.position = "none"
    ) +
    labs(x = "Number of repositories", y = "Language")
```

### Wordcloud of topic {height=45%}

```{r}
library(ggwordcloud)

config_contents |> 
  purrr::map("keywords") |> 
  unlist() |> 
  strsplit(",\\s*") |> 
  unlist() |>
  stringr::str_replace_all("\\-", " ") |>
  stringr::str_replace_all("ization", "isation") |> 
  data.frame(keyword = _) |> 
  # Default keywords from the template
  dplyr::filter(!keyword %in% c("The Carpentries", "data", "software", "lesson")) |> 
  # Merge capitalisation variants and keep the most frequent variant
  dplyr::group_by(tolower(keyword)) |> 
  dplyr::summarise(
    freq = n(),
    keyword = levels(fct_infreq(keyword))[1]
  ) |> 
  ggplot(aes(label = keyword, size = freq)) +
    geom_text_wordcloud() +
    scale_size_area(max_size = 10) +
    theme_minimal() +
    labs(title = "Keywords in Carpentries-style lessons")
```

## Features of Carpentries-style external lessons?

### Row {height=20%}

#### Rmd vs md template

```{r uses_rmd}
uses_rmd <- repos_workbench |>
  as.list() |> 
  purrr::transpose() |> 
  purrr::map(purrr::possibly(~ gh::gh("/repos/{owner}/{repo}/contents/{path}", owner = .x$owner, repo = .x$repo, path = "renv/profiles/lesson-requirements/renv.lock"))) |> 
  purrr::map_lgl(is.null)
```

```{r}
#| content: valuebox
#| title: "Rmd vs md template"
#| color: secondary
list(
  value = sprintf("%.0f%%", sum(uses_rmd) / length(uses_rmd) * 100)
)
```

#### Col

```{r collect_contributors}
prs <- repos_workbench |> 
  as.list() |> 
  purrr::transpose() |> 
  purrr::map(purrr::possibly(~ gh::gh("/repos/{owner}/{repo}/pulls", owner = .x$owner, repo = .x$repo, per_page = 100, state = "all"), otherwise = list(list("title" = ""))))
```

```{r}
using_bot <- repos_workbench |> 
  dplyr::mutate(
    uses_bot = purrr::map_lgl(prs, ~ any(grepl("^Update (\\d+ packages|Workflows)", purrr::map_chr(.x, "title"))))
  ) |> 
  dplyr::pull(uses_bot)
```

```{r}
#| content: valuebox
#| title: "Dependencies update bot"
#| color: secondary
list(
  value = sprintf("%.0f%%", sum(using_bot) / length(using_bot) * 100)
)
```

### Sandpaper version

```{r sandpaper_version}
version_files <- repos_workbench |>
  as.list() |> 
  purrr::transpose() |> 
  purrr::map(purrr::possibly(~ gh::gh("/repos/{owner}/{repo}/contents/{path}", owner = .x$owner, repo = .x$repo, path = ".github/workflows/sandpaper-version.txt"), otherwise = "")) |> 
  purrr::map("content")

sandpaper_versions <- version_files |>
  set_names(repos_workbench$repo) |>
  unlist() |> 
  tibble::enframe(name = "repo", value = "version") |>
  dplyr::mutate(
    version = purrr::map_chr(version, ~ rawToChar(base64enc::base64decode(.x))),
    version = stringr::str_remove_all(version, "\\s"),
    version = versionr::version_number(version),
    version = as.factor(version)
  )
```

```{r fig.height=10}
sandpaper_versions |> 
  ggplot(aes(y = version)) +
    geom_bar() +
    theme_minimal() +
    theme(
      text = element_text(size = 24)
    ) +
    labs(
      x = "Number of repositories",
      y = "sandpaper version"
    )
```

### Are extra features added? {height=20%}

```{r}
uses_fork <- config_contents |> 
  purrr::set_names(repos_workbench$repo) |>
  purrr::imap(~ c(name = .y, custom = .x[c("sandpaper", "varnish","pegboard")])) |> 
  dplyr::bind_rows()
```

```{r}
#| content: valuebox
#| title: "Custom varnish fork"
#| color: secondary
list(
  value = sum(!is.na(uses_fork$custom.varnish))
)
```

```{r}
#| content: valuebox
#| title: "Custom sandpaper fork"
#| color: secondary
list(
  value = sum(!is.na(uses_fork$custom.sandpaper))
)
```

```{r}
#| content: valuebox
#| title: "Custom pegboard fork"
#| color: secondary
list(
  value = sum(!is.na(uses_fork$custom.pegboard))
)
```

# Screenshots {scrolling="true"}

## Col {width = 50%}

```{r, eval = FALSE}
repos_workbench |> 
  dplyr::mutate(url = glue::glue("https://{tolower(owner)}.github.io/{repo}")) |> 
  as.list() |> 
  purrr::transpose() |> 
  purrr::walk(safely(function(element) {
    webshot2::webshot(
      element$url, 
      glue::glue("screenshots/{element$owner}_{element$repo}.png"),
      selector = ".navbar",
      vwidth = 1400,
      expand = c(0, 0, 20, 0)
    )
  }))
```

```{r}
#| class-output: screenshots
#| width: 50%
#| output: asis
fs::dir_ls("screenshots") |> 
  purrr::walk(~ cat(glue::glue("![]({{.x}}){fig-align='center' width=60%}", .open = "{{", .close = "}}"), "\n"))
```

# Methods

::: {.card title="Methods"}

## Identification of repositories using the workbench

Repositories that use the workbench are identified by the presence of a `sandpaper-main.yaml` or `sandpaper-version.txt` file in the `.github/workflows` directory.

## Metadata and config options

In each repository using the workbench, the `config.yaml` file is parsed to extract the following information:

- `keywords`: used to generate the wordcloud
- `lifecycle`
- `lang`
- `license`: ignored in the analysis as at the time of writing, all repositories use the same license: CC-BY 4.0
- use of a custom sandpaper, varnish or pegboard fork or branch

### Other features

- To determine is the repository uses Rmd (vs md) files, we check if the `renv.lock` file is present in the `renv/profiles/lesson-requirements` directory.
- To determine if the repository uses the dependencies update bot, we check it has any pull request with the title containing the string `Update n packages` or `Update Workflows`.
- The sandpaper version is recorded in the `.github/workflows/sandpaper-version.txt` file.

## Tools

```{r, results='asis'}
summary(report::report(sessionInfo()))
```

<details><summary>Citations</summary>

```{r, results='asis'}
report::cite_packages()
```

</details>

:::

# Extra materials

```{=html}
<iframe width="780" height="500" src="extra/CCHD24_slides.pdf"></iframe>
```

```{=html}
<iframe width="780" height="1105" src="extra/CCHD24_poster.pdf"></iframe>
```
